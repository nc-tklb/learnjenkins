///-----------------------------SETUP-----------------------------///
//sets the description of the job
currentBuild.rawBuild.project.description = "Kan bruges til enten at låse en konto eller låse den op."

//Applies language options to the parameter descriptions
handlingDescription = "Vælg om kontoen skal låses eller låses op."
if("null" == "EN") {
    handlingDescription = "Choose whether or not to lock or unlock your account."
}

//sets up parameters and properties for the job
properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
            "null"!="true" ? disableConcurrentBuilds() : buildDiscarder(logRotator(artifactDaysToKeepStr: '-1', artifactNumToKeepStr: '-1', daysToKeepStr: '-1', numToKeepStr: '-1')),
            buildDiscarder(logRotator(
                    daysToKeepStr: 1000 != null ? "1000" : "-1",
                    numToKeepStr: 1000 != null ? "1000" : "-1")
            ),
            authorizationMatrix(buildRoles()),
            parameters([
                    //Templating er nødvendigt da vi ikke ved om der er et passwordparam
                    /**/
                    password(defaultValue: '', description: 'Angiv master password.', name: 'MASTER_PASSWORD_DNOC') ,
                    /**/
                    string(defaultValue: '', description: '', name: 'Brugernavn', trim: false),
                    choice(choices: ['--vælg handling--', 'lock', 'unlock'], description: handlingDescription, name: 'Handling')

            ]), [$class: 'ThrottleJobProperty', categories: [], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 0, maxConcurrentTotal: 0, paramsToUseForLimit: '', throttleEnabled: false, throttleOption: 'project']
])
///-----------------------------PIPELINE-----------------------------///
pipeline {
    agent 'null' //agent running the job

    tools{ //bind tools to be used in this job to the correct names
        gradle 'gradle-latest'
    }

    environment{ //environment variables to be used throughout the job
        gradle_path='/software/netcompany/product/ob/current'
        gradleRun = "gradlew -Puser=${Brugernavn} -Paction=${Handling} -Pcontext=*dnoc.atp-fyp-shd01 -PdisableTunneling=false"
    }

    stages { //Stages of the job
        stage ("Kontrollerer parametre"){
            steps{
                script {
                    checkIfFirstBuild()
                    checkParameters(["${Brugernavn}"])
                }
            }
        }
        stage ("Retter brugerindstillinger") {
            steps{
                echo "CHANGING USER LOCK STATUS"
                dir(gradle_path) {
                    //Templating er nødvendigt da vi ikke ved om der er et maskedpassword eller et passwordparam
                    /**/
                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: '${passwordparam.name}', var: 'MASTER_PASSWORD_DNOC']]]) {
                        sh gradleRun + " -PMASTER_PASSWORD_DNOC=${MASTER_PASSWORD_DNOC}" + " setLdapAccountLock"
                    }
                    /**/
                }
            }
        }
    }
}

///-----------------------------METHODS-----------------------------///
//Checks if this is the first build, so that the parameters can be set up before an actual build is performed
void checkIfFirstBuild(){
    if (currentBuild.number < 2) {
        try {
            sh './build.sh'
        }
        finally {
            echo 'This is the first build of the job, parameters are now set up. Build again to use parameters'
        }
    }
}
//Method used for checking the parameters in the first step of the pipeline, use to make sure they are set up correctly
void checkParameters(List<String> params){
    echo "CHECKING PARAMETERS"
    for (String s : params){
        if( s.length() < 1) {
            try {
                sh './build.sh'
            }
            finally {
                echo 'Not all required parameters were filled out. Exiting...'
            }
        }
    }
}

//turns the list string into a groovy list of objects
String[] parseList(String input){
    return ((input).replaceAll(/[\[\]]+/, "")).split(', ')
}

//Makes a string for the authorizationmatrix property for all the build roles
List<String> buildRoles(){
    List<String> output = []
    /**/
    return output
}
