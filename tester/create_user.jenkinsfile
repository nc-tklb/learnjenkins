def daysToKeep="-1"
def numToKeep="-1"
if(true) {
    daysToKeep = "100"
}
if(true) {
    numToKeep = "100"
}
def usergrouplist = []
script{

    usergrouplist=("[g_dev_appserver_ssh, g_dev_appserver_sudo, g_dev_dbserver_ssh, g_dev_dbserver_sudo, g_dev_adserver_ssh, g_dev_adserver_sudo, nc_drift_admin, nc_drift_user]".replaceAll(/[\[\]]+/, "")).split(', ')
    usergroups=''
    usergrouplist.each{
        usergroups += it + '\n'
    }
    for (String s : usergrouplist){
        println s
    }
    println usergroups
}

pipeline {
    agent any
    options{
        buildDiscarder(logRotator(daysToKeepStr: daysToKeep, numToKeepStr: numToKeep))
    }

    parameters {
        /*if(null != null){
            for (Map passwordparam : data.params.passwordparams){
                password(name: "${passwordparam.name}",description: "passwordparam.description")
            }
        }*/
        string(name: "Brugernavn")
        string(name: "Fornavn")
        string(name: "Efternavn")
        string(name: "Email")
        choice(name: "Brugerroller", choices: usergroups)
    }
    tools {
        gradle 'gradle-latest'
    }
    environment {
        swag="swug"
    }
    stages {
        stage ('Initialize') {
            steps {
                script{
                    currentBuild.rawBuild.project.description = "Opretter en administrator, som kan have sudo rettigheder."
                }
                echo "Working Directory:"
                sh 'pwd'
            }
        }
        stage ('print test values') {
            steps {
                echo "days from this script: ${daysToKeep}"
                echo "days from YML: 100"
                echo "num from this script: ${numToKeep}"
                echo "num from YML: 100"
            }
        }
        stage('environment variables'){
            steps{
                echo "${swag}"
            }
        }
    }
}
